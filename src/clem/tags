!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
AXIS_LEFT_TRIGGER	input/gamepad.h	/^		AXIS_LEFT_TRIGGER,$/;"	e	enum:Gamepad::__anon691435490103
AXIS_RIGHT_TRIGGER	input/gamepad.h	/^		AXIS_RIGHT_TRIGGER,$/;"	e	enum:Gamepad::__anon691435490103
BATTERY_DEVTYPE_GAMEPAD	input/xinput.h	/^#define BATTERY_DEVTYPE_GAMEPAD /;"	d
BATTERY_DEVTYPE_HEADSET	input/xinput.h	/^#define BATTERY_DEVTYPE_HEADSET /;"	d
BATTERY_LEVEL_EMPTY	input/xinput.h	/^#define BATTERY_LEVEL_EMPTY /;"	d
BATTERY_LEVEL_FULL	input/xinput.h	/^#define BATTERY_LEVEL_FULL /;"	d
BATTERY_LEVEL_LOW	input/xinput.h	/^#define BATTERY_LEVEL_LOW /;"	d
BATTERY_LEVEL_MEDIUM	input/xinput.h	/^#define BATTERY_LEVEL_MEDIUM /;"	d
BATTERY_TYPE_ALKALINE	input/xinput.h	/^#define BATTERY_TYPE_ALKALINE /;"	d
BATTERY_TYPE_DISCONNECTED	input/xinput.h	/^#define BATTERY_TYPE_DISCONNECTED /;"	d
BATTERY_TYPE_NIMH	input/xinput.h	/^#define BATTERY_TYPE_NIMH /;"	d
BATTERY_TYPE_UNKNOWN	input/xinput.h	/^#define BATTERY_TYPE_UNKNOWN /;"	d
BATTERY_TYPE_WIRED	input/xinput.h	/^#define BATTERY_TYPE_WIRED /;"	d
BUTTON_A	input/gamepad.h	/^		BUTTON_A,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_B	input/gamepad.h	/^		BUTTON_B,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_BACK	input/gamepad.h	/^		BUTTON_BACK,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_DPAD_DOWN	input/gamepad.h	/^		BUTTON_DPAD_DOWN,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_DPAD_LEFT	input/gamepad.h	/^		BUTTON_DPAD_LEFT,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_DPAD_RIGHT	input/gamepad.h	/^		BUTTON_DPAD_RIGHT,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_DPAD_UP	input/gamepad.h	/^		BUTTON_DPAD_UP,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_LEFT_SHOULDER	input/gamepad.h	/^		BUTTON_LEFT_SHOULDER,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_LEFT_THUMB	input/gamepad.h	/^		BUTTON_LEFT_THUMB,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_MAX	input/gamepad.h	/^		BUTTON_MAX$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_PAUSE	input/gamepad.h	/^		BUTTON_PAUSE,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_RIGHT_SHOULDER	input/gamepad.h	/^		BUTTON_RIGHT_SHOULDER,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_RIGHT_THUMB	input/gamepad.h	/^		BUTTON_RIGHT_THUMB,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_SELECT	input/gamepad.h	/^		BUTTON_SELECT,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_START	input/gamepad.h	/^		BUTTON_START,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_X	input/gamepad.h	/^		BUTTON_X,$/;"	e	enum:Gamepad::__anon691435490103
BUTTON_Y	input/gamepad.h	/^		BUTTON_Y,$/;"	e	enum:Gamepad::__anon691435490103
Back	color.h	/^enum class Back$/;"	g
BatteryLevel	input/xinput.h	/^    BYTE BatteryLevel;$/;"	m	struct:_XINPUT_BATTERY_INFORMATION	typeref:typename:BYTE
BatteryType	input/xinput.h	/^    BYTE BatteryType;$/;"	m	struct:_XINPUT_BATTERY_INFORMATION	typeref:typename:BYTE
CLEM_ASSERT_H_	assert.h	/^#define CLEM_ASSERT_H_$/;"	d
CLEM_CAMERA_H_	camera.h	/^#define CLEM_CAMERA_H_$/;"	d
CLEM_CLEM_HPP_	clem.hpp	/^#define CLEM_CLEM_HPP_$/;"	d
CLEM_COLOR_H_	color.h	/^#define CLEM_COLOR_H_$/;"	d
CLEM_DIRECTOR_H_	director.h	/^#define CLEM_DIRECTOR_H_$/;"	d
CLEM_EVENT_H_	event.h	/^#define CLEM_EVENT_H_$/;"	d
CLEM_FACTOR_H_	factor.h	/^#define CLEM_FACTOR_H_$/;"	d
CLEM_INPUT_COMPONENT_H_	input.h	/^#define CLEM_INPUT_COMPONENT_H_$/;"	d
CLEM_INPUT_GAMEPAD_H_	input/gamepad.h	/^#define CLEM_INPUT_GAMEPAD_H_$/;"	d
CLEM_KEYBOARD_INPUT_H_	keyboard_input.h	/^#define CLEM_KEYBOARD_INPUT_H_$/;"	d
CLEM_LOGGER_H_	logger.h	/^#define CLEM_LOGGER_H_$/;"	d
CLEM_OBSERVABLE_H_	observable.h	/^#define CLEM_OBSERVABLE_H_$/;"	d
CLEM_OBSERVER_H_	observer.h	/^#define CLEM_OBSERVER_H_$/;"	d
CLEM_PHYSICS_PHYSICS_BODY_H_	physics/physics_body.h	/^#define CLEM_PHYSICS_PHYSICS_BODY_H_$/;"	d
CLEM_PLATFORM_H_	platform.h	/^#define CLEM_PLATFORM_H_$/;"	d
CLEM_SCENE_H_	scene.h	/^#define CLEM_SCENE_H_$/;"	d
CLEM_TERMINAL_H_	terminal.h	/^#define CLEM_TERMINAL_H_$/;"	d
CLEM_TEXTURE_H_	texture.h	/^#define CLEM_TEXTURE_H_$/;"	d
CLEM_TYPE_POINT_H_	type/point.h	/^#define CLEM_TYPE_POINT_H_$/;"	d
CLEM_TYPE_RECT_HPP_	type/rect.h	/^#define CLEM_TYPE_RECT_HPP_$/;"	d
CLEM_TYPE_SIZE_H_	Math/Size.h	/^#define CLEM_TYPE_SIZE_H_$/;"	d
CLEM_TYPE_TILE_H_	tile.h	/^#define CLEM_TYPE_TILE_H_$/;"	d
CLEM_TYPE_TYPE_H_	type.h	/^#define CLEM_TYPE_TYPE_H_$/;"	d
CLEM_TYPE_VECTOR_H_	type/vec2.h	/^#define CLEM_TYPE_VECTOR_H_$/;"	d
CLEM_WINDOWS_H_	windows.h	/^#define CLEM_WINDOWS_H_$/;"	d
Camera	camera.cpp	/^Camera::Camera()$/;"	f	class:Camera
Camera	camera.cpp	/^Camera::Camera(Scene* s)$/;"	f	class:Camera
Camera	camera.h	/^class Camera$/;"	c
Color	color.cpp	/^Color::Color()$/;"	f	class:Color
Color	color.cpp	/^Color::Color(Fore f)$/;"	f	class:Color
Color	color.cpp	/^Color::Color(Fore f, Back b)$/;"	f	class:Color
Color	color.h	/^class Color$/;"	c
Component	component.h	/^class Component$/;"	c
Cursor	cursor.h	/^class Cursor$/;"	c
Cursor	terminal.h	/^  class Cursor$/;"	c	class:Terminal
Director	director.cpp	/^Director::Director()$/;"	f	class:Director
Director	director.h	/^class Director$/;"	c
Event	event.cpp	/^Event::Event(Type type)$/;"	f	class:Event
Event	event.h	/^class Event$/;"	c
Factor	factor.cpp	/^Factor::Factor()$/;"	f	class:Factor
Factor	factor.cpp	/^Factor::Factor(const Size& s)$/;"	f	class:Factor
Factor	factor.cpp	/^Factor::Factor(const Texture& t)$/;"	f	class:Factor
Factor	factor.h	/^class Factor$/;"	c
Flags	input/xinput.h	/^    WORD Flags;$/;"	m	struct:_XINPUT_CAPABILITIES	typeref:typename:WORD
Flags	input/xinput.h	/^    WORD Flags;$/;"	m	struct:_XINPUT_KEYSTROKE	typeref:typename:WORD
Fore	color.h	/^enum class Fore$/;"	g
Gamepad	input/gamepad.cpp	/^Gamepad::Gamepad(short index)$/;"	f	class:Gamepad
Gamepad	input/gamepad.h	/^class Gamepad$/;"	c
Gamepad	input/xinput.h	/^    XINPUT_GAMEPAD Gamepad;$/;"	m	struct:_XINPUT_CAPABILITIES	typeref:typename:XINPUT_GAMEPAD
Gamepad	input/xinput.h	/^    XINPUT_GAMEPAD Gamepad;$/;"	m	struct:_XINPUT_STATE	typeref:typename:XINPUT_GAMEPAD
GamepadEvent	input/gamepad_event.cpp	/^GamepadEvent::GamepadEvent(SubType, Gamepad*, short key, bool status)$/;"	f	class:GamepadEvent
GamepadEvent	input/gamepad_event.cpp	/^GamepadEvent::GamepadEvent(SubType, Gamepad*, short key, float value)$/;"	f	class:GamepadEvent
GamepadEvent	input/gamepad_event.h	/^class GamepadEvent : public Event$/;"	c
HidCode	input/xinput.h	/^    BYTE HidCode;$/;"	m	struct:_XINPUT_KEYSTROKE	typeref:typename:BYTE
Input	input.h	/^class Input : public Observable$/;"	c
InputEvent	input.h	/^typedef ushort         InputEvent;$/;"	t	typeref:typename:ushort
JOYSTICK_LEFT_X	input/gamepad.h	/^		JOYSTICK_LEFT_X,$/;"	e	enum:Gamepad::__anon691435490103
JOYSTICK_LEFT_Y	input/gamepad.h	/^		JOYSTICK_LEFT_Y,$/;"	e	enum:Gamepad::__anon691435490103
JOYSTICK_RIGHT_X	input/gamepad.h	/^		JOYSTICK_RIGHT_X,$/;"	e	enum:Gamepad::__anon691435490103
JOYSTICK_RIGHT_Y	input/gamepad.h	/^		JOYSTICK_RIGHT_Y,$/;"	e	enum:Gamepad::__anon691435490103
KeyboardInput	keyboard_input.h	/^class KeyboardInput : public Input$/;"	c
Logger	logger.h	/^class Logger$/;"	c
OS_ANDROID	platform.h	/^	#define OS_ANDROID$/;"	d
OS_IPHONE	platform.h	/^	#define OS_IPHONE$/;"	d
OS_LINUX	platform.h	/^	#define OS_LINUX$/;"	d
OS_MAC	platform.h	/^	#define OS_MAC$/;"	d
OS_UNIX	platform.h	/^	#define OS_UNIX$/;"	d
OS_WIN	platform.h	/^	#define OS_WIN$/;"	d
Observable	observable.h	/^class Observable$/;"	c
Observer	observer.h	/^class Observer$/;"	c
PXINPUT_BATTERY_INFORMATION	input/xinput.h	/^} XINPUT_BATTERY_INFORMATION, *PXINPUT_BATTERY_INFORMATION;$/;"	t	typeref:struct:_XINPUT_BATTERY_INFORMATION *
PXINPUT_CAPABILITIES	input/xinput.h	/^} XINPUT_CAPABILITIES, *PXINPUT_CAPABILITIES;$/;"	t	typeref:struct:_XINPUT_CAPABILITIES *
PXINPUT_GAMEPAD	input/xinput.h	/^} XINPUT_GAMEPAD, *PXINPUT_GAMEPAD;$/;"	t	typeref:struct:_XINPUT_GAMEPAD *
PXINPUT_KEYSTROKE	input/xinput.h	/^} XINPUT_KEYSTROKE, *PXINPUT_KEYSTROKE;$/;"	t	typeref:struct:_XINPUT_KEYSTROKE *
PXINPUT_STATE	input/xinput.h	/^} XINPUT_STATE, *PXINPUT_STATE;$/;"	t	typeref:struct:_XINPUT_STATE *
PXINPUT_VIBRATION	input/xinput.h	/^} XINPUT_VIBRATION, *PXINPUT_VIBRATION;$/;"	t	typeref:struct:_XINPUT_VIBRATION *
PhysicsBody	physics/physics_body.h	/^class PhysicsBody$/;"	c
PhysicsShape	physics/physics_shape.h	/^class PhysicsShape$/;"	c
PhysicsShapeBox	physics/physics_shape.h	/^class PhysicsShapeBox : public PhysicsShape$/;"	c
PhysicsShapeCircle	physics/physics_shape.h	/^class PhysicsShapeCircle : public PhysicsShape$/;"	c
PhysicsShapeEdgeBox	physics/physics_shape.h	/^class PhysicsShapeEdgeBox : public PhysicsShape$/;"	c
PhysicsShapeEdgeSegment	physics/physics_shape.h	/^class PhysicsShapeEdgeSegment : public PhysicsShape$/;"	c
PhysicsWorld	physics/physics_world.h	/^class PhysicsWorld$/;"	c
Point	type/point.cpp	/^Point::Point()$/;"	f	class:Point
Point	type/point.cpp	/^Point::Point(const Vec2& vec)$/;"	f	class:Point
Point	type/point.cpp	/^Point::Point(float x, float y)$/;"	f	class:Point
Point	type/point.h	/^class Point$/;"	c
Rect	type/rect.cpp	/^Rect::Rect()$/;"	f	class:Rect
Rect	type/rect.cpp	/^Rect::Rect(const Point& p, const Size& size)$/;"	f	class:Rect
Rect	type/rect.cpp	/^Rect::Rect(ushort x, ushort y, ushort width, ushort height)$/;"	f	class:Rect
Rect	type/rect.h	/^class Rect$/;"	c
STATIC	physics/physics_body.h	/^	STATIC$/;"	e	enum:PhysicsBody::Type
Scene	scene.cpp	/^Scene::Scene()$/;"	f	class:Scene
Scene	scene.h	/^class Scene$/;"	c
Size	type/size.cpp	/^Size::Size()$/;"	f	class:Size
Size	type/size.cpp	/^Size::Size(int x, int y)$/;"	f	class:Size
Size	Math/Size.h	/^class Size$/;"	c
SubType	input/gamepad_event.h	/^	enum class SubType$/;"	g	class:GamepadEvent
SubType	input/xinput.h	/^    BYTE SubType;$/;"	m	struct:_XINPUT_CAPABILITIES	typeref:typename:BYTE
Terminal	terminal.h	/^class Terminal$/;"	c
Texture	texture.cpp	/^Texture::Texture()$/;"	f	class:Texture
Texture	texture.cpp	/^Texture::Texture(Size s)$/;"	f	class:Texture
Texture	texture.cpp	/^Texture::Texture(Size s, const Tile& t)$/;"	f	class:Texture
Texture	texture.cpp	/^Texture::Texture(const Tile& t)$/;"	f	class:Texture
Texture	texture.h	/^class Texture$/;"	c
Tile	tile.cpp	/^Tile::Tile()$/;"	f	class:Tile
Tile	tile.cpp	/^Tile::Tile(char c)$/;"	f	class:Tile
Tile	tile.cpp	/^Tile::Tile(char c, const Color& co)$/;"	f	class:Tile
Tile	tile.h	/^class Tile$/;"	c
Type	event.h	/^	enum class Type$/;"	g	class:Event
Type	input/xinput.h	/^    BYTE Type;$/;"	m	struct:_XINPUT_CAPABILITIES	typeref:typename:BYTE
Type	physics/physics_body.h	/^enum class PhysicsBody::Type$/;"	g	class:PhysicsBody
Unicode	input/xinput.h	/^    WCHAR Unicode;$/;"	m	struct:_XINPUT_KEYSTROKE	typeref:typename:WCHAR
UserIndex	input/xinput.h	/^    BYTE UserIndex;$/;"	m	struct:_XINPUT_KEYSTROKE	typeref:typename:BYTE
VK_PAD_A	input/xinput.h	/^#define VK_PAD_A /;"	d
VK_PAD_B	input/xinput.h	/^#define VK_PAD_B /;"	d
VK_PAD_BACK	input/xinput.h	/^#define VK_PAD_BACK /;"	d
VK_PAD_DPAD_DOWN	input/xinput.h	/^#define VK_PAD_DPAD_DOWN /;"	d
VK_PAD_DPAD_LEFT	input/xinput.h	/^#define VK_PAD_DPAD_LEFT /;"	d
VK_PAD_DPAD_RIGHT	input/xinput.h	/^#define VK_PAD_DPAD_RIGHT /;"	d
VK_PAD_DPAD_UP	input/xinput.h	/^#define VK_PAD_DPAD_UP /;"	d
VK_PAD_LSHOULDER	input/xinput.h	/^#define VK_PAD_LSHOULDER /;"	d
VK_PAD_LTHUMB_DOWN	input/xinput.h	/^#define VK_PAD_LTHUMB_DOWN /;"	d
VK_PAD_LTHUMB_DOWNLEFT	input/xinput.h	/^#define VK_PAD_LTHUMB_DOWNLEFT /;"	d
VK_PAD_LTHUMB_DOWNRIGHT	input/xinput.h	/^#define VK_PAD_LTHUMB_DOWNRIGHT /;"	d
VK_PAD_LTHUMB_LEFT	input/xinput.h	/^#define VK_PAD_LTHUMB_LEFT /;"	d
VK_PAD_LTHUMB_PRESS	input/xinput.h	/^#define VK_PAD_LTHUMB_PRESS /;"	d
VK_PAD_LTHUMB_RIGHT	input/xinput.h	/^#define VK_PAD_LTHUMB_RIGHT /;"	d
VK_PAD_LTHUMB_UP	input/xinput.h	/^#define VK_PAD_LTHUMB_UP /;"	d
VK_PAD_LTHUMB_UPLEFT	input/xinput.h	/^#define VK_PAD_LTHUMB_UPLEFT /;"	d
VK_PAD_LTHUMB_UPRIGHT	input/xinput.h	/^#define VK_PAD_LTHUMB_UPRIGHT /;"	d
VK_PAD_LTRIGGER	input/xinput.h	/^#define VK_PAD_LTRIGGER /;"	d
VK_PAD_RSHOULDER	input/xinput.h	/^#define VK_PAD_RSHOULDER /;"	d
VK_PAD_RTHUMB_DOWN	input/xinput.h	/^#define VK_PAD_RTHUMB_DOWN /;"	d
VK_PAD_RTHUMB_DOWNLEFT	input/xinput.h	/^#define VK_PAD_RTHUMB_DOWNLEFT /;"	d
VK_PAD_RTHUMB_DOWNRIGHT	input/xinput.h	/^#define VK_PAD_RTHUMB_DOWNRIGHT /;"	d
VK_PAD_RTHUMB_LEFT	input/xinput.h	/^#define VK_PAD_RTHUMB_LEFT /;"	d
VK_PAD_RTHUMB_PRESS	input/xinput.h	/^#define VK_PAD_RTHUMB_PRESS /;"	d
VK_PAD_RTHUMB_RIGHT	input/xinput.h	/^#define VK_PAD_RTHUMB_RIGHT /;"	d
VK_PAD_RTHUMB_UP	input/xinput.h	/^#define VK_PAD_RTHUMB_UP /;"	d
VK_PAD_RTHUMB_UPLEFT	input/xinput.h	/^#define VK_PAD_RTHUMB_UPLEFT /;"	d
VK_PAD_RTHUMB_UPRIGHT	input/xinput.h	/^#define VK_PAD_RTHUMB_UPRIGHT /;"	d
VK_PAD_RTRIGGER	input/xinput.h	/^#define VK_PAD_RTRIGGER /;"	d
VK_PAD_START	input/xinput.h	/^#define VK_PAD_START /;"	d
VK_PAD_X	input/xinput.h	/^#define VK_PAD_X /;"	d
VK_PAD_Y	input/xinput.h	/^#define VK_PAD_Y /;"	d
Vec2	type/vec2.cpp	/^Vec2::Vec2()$/;"	f	class:Vec2
Vec2	type/vec2.cpp	/^Vec2::Vec2(float x, float y)$/;"	f	class:Vec2
Vec2	type/vec2.h	/^class Vec2$/;"	c
Vibration	input/xinput.h	/^    XINPUT_VIBRATION Vibration;$/;"	m	struct:_XINPUT_CAPABILITIES	typeref:typename:XINPUT_VIBRATION
VirtualKey	input/xinput.h	/^    WORD VirtualKey;$/;"	m	struct:_XINPUT_KEYSTROKE	typeref:typename:WORD
Windows	windows.h	/^class Windows$/;"	c
XINPUT_BATTERY_INFORMATION	input/xinput.h	/^} XINPUT_BATTERY_INFORMATION, *PXINPUT_BATTERY_INFORMATION;$/;"	t	typeref:struct:_XINPUT_BATTERY_INFORMATION
XINPUT_CAPABILITIES	input/xinput.h	/^} XINPUT_CAPABILITIES, *PXINPUT_CAPABILITIES;$/;"	t	typeref:struct:_XINPUT_CAPABILITIES
XINPUT_CAPS_VOICE_SUPPORTED	input/xinput.h	/^#define XINPUT_CAPS_VOICE_SUPPORTED /;"	d
XINPUT_DEVSUBTYPE_ARCADE_STICK	input/xinput.h	/^#define XINPUT_DEVSUBTYPE_ARCADE_STICK /;"	d
XINPUT_DEVSUBTYPE_DANCE_PAD	input/xinput.h	/^#define XINPUT_DEVSUBTYPE_DANCE_PAD /;"	d
XINPUT_DEVSUBTYPE_DRUM_KIT	input/xinput.h	/^#define XINPUT_DEVSUBTYPE_DRUM_KIT /;"	d
XINPUT_DEVSUBTYPE_FLIGHT_SICK	input/xinput.h	/^#define XINPUT_DEVSUBTYPE_FLIGHT_SICK /;"	d
XINPUT_DEVSUBTYPE_GAMEPAD	input/xinput.h	/^#define XINPUT_DEVSUBTYPE_GAMEPAD /;"	d
XINPUT_DEVSUBTYPE_GUITAR	input/xinput.h	/^#define XINPUT_DEVSUBTYPE_GUITAR /;"	d
XINPUT_DEVSUBTYPE_WHEEL	input/xinput.h	/^#define XINPUT_DEVSUBTYPE_WHEEL /;"	d
XINPUT_DEVTYPE_GAMEPAD	input/xinput.h	/^#define XINPUT_DEVTYPE_GAMEPAD /;"	d
XINPUT_FLAG_GAMEPAD	input/xinput.h	/^#define XINPUT_FLAG_GAMEPAD /;"	d
XINPUT_GAMEPAD	input/xinput.h	/^} XINPUT_GAMEPAD, *PXINPUT_GAMEPAD;$/;"	t	typeref:struct:_XINPUT_GAMEPAD
XINPUT_GAMEPAD_A	input/xinput.h	/^#define XINPUT_GAMEPAD_A /;"	d
XINPUT_GAMEPAD_B	input/xinput.h	/^#define XINPUT_GAMEPAD_B /;"	d
XINPUT_GAMEPAD_BACK	input/xinput.h	/^#define XINPUT_GAMEPAD_BACK /;"	d
XINPUT_GAMEPAD_DPAD_DOWN	input/xinput.h	/^#define XINPUT_GAMEPAD_DPAD_DOWN /;"	d
XINPUT_GAMEPAD_DPAD_LEFT	input/xinput.h	/^#define XINPUT_GAMEPAD_DPAD_LEFT /;"	d
XINPUT_GAMEPAD_DPAD_RIGHT	input/xinput.h	/^#define XINPUT_GAMEPAD_DPAD_RIGHT /;"	d
XINPUT_GAMEPAD_DPAD_UP	input/xinput.h	/^#define XINPUT_GAMEPAD_DPAD_UP /;"	d
XINPUT_GAMEPAD_LEFT_SHOULDER	input/xinput.h	/^#define XINPUT_GAMEPAD_LEFT_SHOULDER /;"	d
XINPUT_GAMEPAD_LEFT_THUMB	input/xinput.h	/^#define XINPUT_GAMEPAD_LEFT_THUMB /;"	d
XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE	input/xinput.h	/^#define XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE /;"	d
XINPUT_GAMEPAD_RIGHT_SHOULDER	input/xinput.h	/^#define XINPUT_GAMEPAD_RIGHT_SHOULDER /;"	d
XINPUT_GAMEPAD_RIGHT_THUMB	input/xinput.h	/^#define XINPUT_GAMEPAD_RIGHT_THUMB /;"	d
XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE	input/xinput.h	/^#define XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE /;"	d
XINPUT_GAMEPAD_START	input/xinput.h	/^#define XINPUT_GAMEPAD_START /;"	d
XINPUT_GAMEPAD_TRIGGER_THRESHOLD	input/xinput.h	/^#define XINPUT_GAMEPAD_TRIGGER_THRESHOLD /;"	d
XINPUT_GAMEPAD_X	input/xinput.h	/^#define XINPUT_GAMEPAD_X /;"	d
XINPUT_GAMEPAD_Y	input/xinput.h	/^#define XINPUT_GAMEPAD_Y /;"	d
XINPUT_KEYSTROKE	input/xinput.h	/^} XINPUT_KEYSTROKE, *PXINPUT_KEYSTROKE;$/;"	t	typeref:struct:_XINPUT_KEYSTROKE
XINPUT_KEYSTROKE_KEYDOWN	input/xinput.h	/^#define XINPUT_KEYSTROKE_KEYDOWN /;"	d
XINPUT_KEYSTROKE_KEYUP	input/xinput.h	/^#define XINPUT_KEYSTROKE_KEYUP /;"	d
XINPUT_KEYSTROKE_REPEAT	input/xinput.h	/^#define XINPUT_KEYSTROKE_REPEAT /;"	d
XINPUT_STATE	input/xinput.h	/^} XINPUT_STATE, *PXINPUT_STATE;$/;"	t	typeref:struct:_XINPUT_STATE
XINPUT_VIBRATION	input/xinput.h	/^} XINPUT_VIBRATION, *PXINPUT_VIBRATION;$/;"	t	typeref:struct:_XINPUT_VIBRATION
XUSER_INDEX_ANY	input/xinput.h	/^#define XUSER_INDEX_ANY /;"	d
XUSER_MAX_COUNT	input/xinput.h	/^#define XUSER_MAX_COUNT /;"	d
_XINPUT_BATTERY_INFORMATION	input/xinput.h	/^typedef struct _XINPUT_BATTERY_INFORMATION$/;"	s
_XINPUT_CAPABILITIES	input/xinput.h	/^typedef struct _XINPUT_CAPABILITIES {$/;"	s
_XINPUT_GAMEPAD	input/xinput.h	/^typedef struct _XINPUT_GAMEPAD {$/;"	s
_XINPUT_KEYSTROKE	input/xinput.h	/^typedef struct _XINPUT_KEYSTROKE {$/;"	s
_XINPUT_STATE	input/xinput.h	/^typedef struct _XINPUT_STATE {$/;"	s
_XINPUT_VIBRATION	input/xinput.h	/^typedef struct _XINPUT_VIBRATION {$/;"	s
__WINE_XINPUT_H	input/xinput.h	/^#define __WINE_XINPUT_H$/;"	d
__anon0a08a6c40102	scene.cpp	/^	auto it = std::lower_bound(cameras.begin(), cameras.end(), cam, [](const Camera* a, const Camer/;"	f	function:Scene::addCamera	file:
__anon691435490103	input/gamepad.h	/^	{$/;"	g	class:Gamepad
accelerate	physics/physics_body.h	/^	Vec2 accelerate;$/;"	m	class:PhysicsBody	typeref:typename:Vec2
addCamera	scene.cpp	/^void Scene::addCamera(Camera* cam)$/;"	f	class:Scene	typeref:typename:void
addComponent	factor.cpp	/^void Factor::addComponent(Component* com)$/;"	f	class:Factor	typeref:typename:void
addFactor	scene.cpp	/^void Scene::addFactor(Factor* f)$/;"	f	class:Scene	typeref:typename:void
addObserver	observable.cpp	/^void Observable::addObserver(Observer* o)$/;"	f	class:Observable	typeref:typename:void
aqua	color.h	/^	aqua = cyan,$/;"	e	enum:Back
aqua	color.h	/^	aqua = cyan,$/;"	e	enum:Fore
area	type/size.cpp	/^ushort Size::area() const$/;"	f	class:Size	typeref:typename:ushort
assert	assert.h	/^#define assert(/;"	d
at	texture.cpp	/^const Tile& Texture::at(const Point& p) const$/;"	f	class:Texture	typeref:typename:const Tile &
at	texture.cpp	/^const Tile& Texture::at(ushort x, ushort y) const$/;"	f	class:Texture	typeref:typename:const Tile &
axis_status_changed	input/gamepad_event.h	/^		axis_status_changed$/;"	e	enum:GamepadEvent::SubType
bLeftTrigger	input/xinput.h	/^    BYTE bLeftTrigger;$/;"	m	struct:_XINPUT_GAMEPAD	typeref:typename:BYTE
bRightTrigger	input/xinput.h	/^    BYTE bRightTrigger;$/;"	m	struct:_XINPUT_GAMEPAD	typeref:typename:BYTE
back	color.h	/^	const char* back;$/;"	m	class:Color	typeref:typename:const char *
bind	input.cpp	/^void Input::bind(ushort code, const InputEvent& event)$/;"	f	class:Input	typeref:typename:void
black	color.h	/^	black,$/;"	e	enum:Back
black	color.h	/^	black,$/;"	e	enum:Fore
blue	color.h	/^	blue,$/;"	e	enum:Back
blue	color.h	/^	blue,$/;"	e	enum:Fore
bodies	physics/physics_world.h	/^	std::vector<PhysicsBody*> bodies;$/;"	m	class:PhysicsWorld	typeref:typename:std::vector<PhysicsBody * >
bottom	type/rect.cpp	/^float Rect::bottom() const$/;"	f	class:Rect	typeref:typename:float
button_status_changed	input/gamepad_event.h	/^		button_status_changed,$/;"	e	enum:GamepadEvent::SubType
cameras	scene.h	/^	std::vector<Camera*> cameras;$/;"	m	class:Scene	typeref:typename:std::vector<Camera * >
center	type/rect.cpp	/^Point Rect::center() const$/;"	f	class:Rect	typeref:typename:Point
ch	tile.h	/^	char  ch;$/;"	m	class:Tile	typeref:typename:char
clear	texture.cpp	/^void Texture::clear()$/;"	f	class:Texture	typeref:typename:void
clementine	CMakeLists.txt	/^add_library(clementine STATIC ${sources})$/;"	t
color	tile.h	/^	Color color;$/;"	m	class:Tile	typeref:typename:Color
components	factor.h	/^	std::vector<Component*> components;$/;"	m	class:Factor	typeref:typename:std::vector<Component * >
connected	input/gamepad.h	/^	bool  connected;$/;"	m	class:Gamepad	typeref:typename:bool
cyan	color.h	/^	cyan,$/;"	e	enum:Back
cyan	color.h	/^	cyan,$/;"	e	enum:Fore
defaultCamera	scene.h	/^	Camera*              defaultCamera;$/;"	m	class:Scene	typeref:typename:Camera *
depth	camera.h	/^  ushort depth;$/;"	m	class:Camera	typeref:typename:ushort
dirty	observable.h	/^	bool dirty;$/;"	m	class:Observable	typeref:typename:bool
distance	type/point.cpp	/^float Point::distance(const Point& p) const$/;"	f	class:Point	typeref:typename:float
drawCycle	texture.cpp	/^void Texture::drawCycle(const Point& c, ushort r, const Tile& t)$/;"	f	class:Texture	typeref:typename:void
drawLine	texture.cpp	/^void Texture::drawLine(Point a, Point b, const Tile& t)$/;"	f	class:Texture	typeref:typename:void
drawPoint	texture.cpp	/^void Texture::drawPoint(const Point& p, const Tile& t)$/;"	f	class:Texture	typeref:typename:void
drawRect	texture.cpp	/^void Texture::drawRect(const Rect& rect, const Tile& t)$/;"	f	class:Texture	typeref:typename:void
drawTexture	texture.cpp	/^void Texture::drawTexture(const Texture& t, const Point& p)$/;"	f	class:Texture	typeref:typename:void
dwPacketNumber	input/xinput.h	/^    DWORD dwPacketNumber;$/;"	m	struct:_XINPUT_STATE	typeref:typename:DWORD
dynamic	physics/physics_body.h	/^	dynamic,$/;"	e	enum:PhysicsBody::Type
events	input.h	/^	std::vector<InputEvent>      events;$/;"	m	class:Input	typeref:typename:std::vector<InputEvent>
factors	scene.h	/^	std::vector<Factor*> factors;$/;"	m	class:Scene	typeref:typename:std::vector<Factor * >
fore	color.h	/^	const char* fore;$/;"	m	class:Color	typeref:typename:const char *
gamepad	event.h	/^		gamepad$/;"	e	enum:Event::Type
gamepad	input/gamepad_event.h	/^	Gamepad* gamepad;$/;"	m	class:GamepadEvent	typeref:typename:Gamepad *
gamepads	input/gamepad.h	/^	static std::vector<Gamepad*> gamepads;$/;"	m	class:Gamepad	typeref:typename:std::vector<Gamepad * >
getCameras	scene.cpp	/^const vector<Camera*>& Scene::getCameras() const$/;"	f	class:Scene	typeref:typename:const vector<Camera * > &
getChar	tile.cpp	/^char Tile::getChar() const$/;"	f	class:Tile	typeref:typename:char
getColor	tile.cpp	/^const Color& Tile::getColor() const$/;"	f	class:Tile	typeref:typename:const Color &
getCurrentMillSecond	director.cpp	/^long getCurrentMillSecond()$/;"	f	typeref:typename:long
getCurrentScene	director.cpp	/^Scene* Director::getCurrentScene() const$/;"	f	class:Director	typeref:typename:Scene *
getCursorPosition	terminal.cpp	/^Point Terminal::Cursor::getCursorPosition()$/;"	f	class:Terminal::Cursor	typeref:typename:Point
getDefaultCamera	scene.cpp	/^Camera* Scene::getDefaultCamera() const$/;"	f	class:Scene	typeref:typename:Camera *
getDepth	camera.cpp	/^ushort Camera::getDepth() const$/;"	f	class:Camera	typeref:typename:ushort
getDeviceId	input/gamepad.cpp	/^short Gamepad::getDeviceId() const$/;"	f	class:Gamepad	typeref:typename:short
getEvents	input.cpp	/^const vector<InputEvent> Input::getEvents() const$/;"	f	class:Input	typeref:typename:const vector<InputEvent>
getFactors	scene.cpp	/^const std::vector<Factor*>& Scene::getFactors() const$/;"	f	class:Scene	typeref:typename:const std::vector<Factor * > &
getGamepad	input/gamepad_event.cpp	/^Gamepad* GamepadEvent::getGamepad() const$/;"	f	class:GamepadEvent	typeref:typename:Gamepad *
getInstance	director.cpp	/^Director* Director::getInstance()$/;"	f	class:Director	typeref:typename:Director *
getInterval	input.cpp	/^ushort Input::getInterval() const$/;"	f	class:Input	typeref:typename:ushort
getKeyCode	input/gamepad_event.cpp	/^short GamepadEvent::getKeyCode() const$/;"	f	class:GamepadEvent	typeref:typename:short
getKeyStatus	input/gamepad_event.cpp	/^bool GamepadEvent::getKeyStatus() const$/;"	f	class:GamepadEvent	typeref:typename:bool
getPosition	factor.cpp	/^const Point& Factor::getPosition() const$/;"	f	class:Factor	typeref:typename:const Point &
getScene	camera.cpp	/^Scene* Camera::getScene() const$/;"	f	class:Camera	typeref:typename:Scene *
getSize	camera.cpp	/^Size Camera::getSize() const$/;"	f	class:Camera	typeref:typename:Size
getSize	texture.cpp	/^const Size& Texture::getSize() const$/;"	f	class:Texture	typeref:typename:const Size &
getStdOut	windows.cpp	/^HANDLE Windows::getStdOut()$/;"	f	class:Windows	typeref:typename:HANDLE
getString	color.cpp	/^std::string Color::getString() const$/;"	f	class:Color	typeref:typename:std::string
getString	tile.cpp	/^string Tile::getString() const$/;"	f	class:Tile	typeref:typename:string
getSubType	input/gamepad_event.cpp	/^GamepadEvent::SubType GamepadEvent::getSubType() const$/;"	f	class:GamepadEvent	typeref:typename:GamepadEvent::SubType
getTexture	factor.cpp	/^Texture& Factor::getTexture()$/;"	f	class:Factor	typeref:typename:Texture &
getType	event.cpp	/^Event::Type Event::getType() const$/;"	f	class:Event	typeref:typename:Event::Type
getValue	input/gamepad_event.cpp	/^float GamepadEvent::getValue() const$/;"	f	class:GamepadEvent	typeref:typename:float
getWinSize	director.cpp	/^Size Director::getWinSize() const$/;"	f	class:Director	typeref:typename:Size
getWinSize	terminal.cpp	/^Size Terminal::getWinSize()$/;"	f	class:Terminal	typeref:typename:Size
green	color.h	/^	green,$/;"	e	enum:Back
green	color.h	/^	green,$/;"	e	enum:Fore
hStdOut	windows.cpp	/^HANDLE Windows::hStdOut;$/;"	m	class:Windows	typeref:typename:HANDLE
hStdOut	windows.h	/^	static HANDLE hStdOut;$/;"	m	class:Windows	typeref:typename:HANDLE
height	type/rect.h	/^	float height;$/;"	m	class:Rect	typeref:typename:float
hide	terminal.cpp	/^void Terminal::Cursor::hide()$/;"	f	class:Terminal::Cursor	typeref:typename:void
inPos	camera.h	/^	Point  inPos, outPos;$/;"	m	class:Camera	typeref:typename:Point
index	input.h	/^	std::map<ushort, InputEvent> index;$/;"	m	class:Input	typeref:typename:std::map<ushort,InputEvent>
index	logger.h	/^	static map<short, std::ofstream> index;$/;"	m	class:Logger	typeref:typename:map<short,std::ofstream>
initialize	windows.cpp	/^void Windows::initialize()$/;"	f	class:Windows	typeref:typename:void
instance	director.cpp	/^Director Director::instance;$/;"	m	class:Director	typeref:typename:Director
instance	director.h	/^	static Director instance;$/;"	m	class:Director	typeref:typename:Director
interval	input.h	/^	ushort                       interval = 150; \/\/ 重复响应持续相同按键的时间$/;"	m	class:Input	typeref:typename:ushort
isDirty	observable.cpp	/^bool Observable::isDirty() const$/;"	f	class:Observable	typeref:typename:bool
keyCode	input/gamepad_event.h	/^	short    keyCode;$/;"	m	class:GamepadEvent	typeref:typename:short
keyStatus	input/gamepad.h	/^	bool  keyStatus[BUTTON_MAX];$/;"	m	class:Gamepad	typeref:typename:bool[]
keyboard	event.h	/^		keyboard,$/;"	e	enum:Event::Type
kinematic	physics/physics_body.h	/^	kinematic,$/;"	e	enum:PhysicsBody::Type
length	type/vec2.cpp	/^float Vec2::length() const$/;"	f	class:Vec2	typeref:typename:float
loop	director.cpp	/^void Director::loop()$/;"	f	class:Director	typeref:typename:void
moveDown	terminal.cpp	/^void Terminal::Cursor::moveDown(ushort n)$/;"	f	class:Terminal::Cursor	typeref:typename:void
moveLeft	terminal.cpp	/^void Terminal::Cursor::moveLeft(ushort n)$/;"	f	class:Terminal::Cursor	typeref:typename:void
moveRight	terminal.cpp	/^void Terminal::Cursor::moveRight(ushort n)$/;"	f	class:Terminal::Cursor	typeref:typename:void
moveTo	cursor.cpp	/^void Cursor::moveTo(const Point& p)$/;"	f	class:Cursor	typeref:typename:void
moveTo	cursor.cpp	/^void Cursor::moveTo(short x, short y)$/;"	f	class:Cursor	typeref:typename:void
moveTo	terminal.cpp	/^void Terminal::Cursor::moveTo(const Point& pos)$/;"	f	class:Terminal::Cursor	typeref:typename:void
moveUp	terminal.cpp	/^void Terminal::Cursor::moveUp(ushort n)$/;"	f	class:Terminal::Cursor	typeref:typename:void
notifyObserver	input.cpp	/^void Input::notifyObserver() const$/;"	f	class:Input	typeref:typename:void
notifyObserver	observable.cpp	/^void Observable::notifyObserver() const$/;"	f	class:Observable	typeref:typename:void
observers	observable.h	/^	std::vector<Observer*> observers;$/;"	m	class:Observable	typeref:typename:std::vector<Observer * >
onAxis	input/gamepad.cpp	/^void Gamepad::onAxis(short keyCode, float value)$/;"	f	class:Gamepad	typeref:typename:void
onButton	input/gamepad.cpp	/^void Gamepad::onButton(short keyCode)$/;"	f	class:Gamepad	typeref:typename:void
operator !=	type/size.cpp	/^bool Size::operator!=(const Size& s) const$/;"	f	class:Size	typeref:typename:bool
operator !=	type/vec2.cpp	/^bool Vec2::operator!=(const Vec2& vec) const$/;"	f	class:Vec2	typeref:typename:bool
operator *	type/vec2.cpp	/^Vec2 Vec2::operator*(int n) const$/;"	f	class:Vec2	typeref:typename:Vec2
operator *=	type/vec2.cpp	/^Vec2& Vec2::operator*=(int n)$/;"	f	class:Vec2	typeref:typename:Vec2 &
operator +	type/point.cpp	/^Point Point::operator+(const Point& p) const$/;"	f	class:Point	typeref:typename:Point
operator +	type/point.cpp	/^Point Point::operator+(const Vec2& v) const$/;"	f	class:Point	typeref:typename:Point
operator +	type/size.cpp	/^Size Size::operator+(const Size& s) const$/;"	f	class:Size	typeref:typename:Size
operator +	type/vec2.cpp	/^Vec2 Vec2::operator+(const Vec2& vec) const$/;"	f	class:Vec2	typeref:typename:Vec2
operator +=	type/point.cpp	/^const Point& Point::operator+=(const Vec2& v)$/;"	f	class:Point	typeref:typename:const Point &
operator +=	type/vec2.cpp	/^Vec2& Vec2::operator+=(const Vec2& vec)$/;"	f	class:Vec2	typeref:typename:Vec2 &
operator -	type/point.cpp	/^Point Point::operator-(const Point& p) const$/;"	f	class:Point	typeref:typename:Point
operator -	type/point.cpp	/^Point Point::operator-(const Vec2& v) const$/;"	f	class:Point	typeref:typename:Point
operator -	type/vec2.cpp	/^Vec2 Vec2::operator-(const Vec2& vec) const$/;"	f	class:Vec2	typeref:typename:Vec2
operator -=	type/point.cpp	/^const Point& Point::operator-=(const Vec2& v)$/;"	f	class:Point	typeref:typename:const Point &
operator -=	type/vec2.cpp	/^Vec2& Vec2::operator-=(const Vec2& vec)$/;"	f	class:Vec2	typeref:typename:Vec2 &
operator /	type/vec2.cpp	/^Vec2 Vec2::operator\/(int n) const$/;"	f	class:Vec2	typeref:typename:Vec2
operator /=	type/vec2.cpp	/^Vec2& Vec2::operator\/=(int n)$/;"	f	class:Vec2	typeref:typename:Vec2 &
operator ==	type/size.cpp	/^bool Size::operator==(const Size& s) const$/;"	f	class:Size	typeref:typename:bool
operator ==	type/vec2.cpp	/^bool Vec2::operator==(const Vec2& vec) const$/;"	f	class:Vec2	typeref:typename:bool
operator []	texture.cpp	/^const Tile& Texture::operator[](const Point& p) const$/;"	f	class:Texture	typeref:typename:const Tile &
outPos	camera.h	/^	Point  inPos, outPos;$/;"	m	class:Camera	typeref:typename:Point
owner	component.h	/^	Factor* owner;$/;"	m	class:Component	typeref:typename:Factor *
pause	director.cpp	/^void Director::pause()$/;"	f	class:Director	typeref:typename:void
paused	director.h	/^	bool                paused;$/;"	m	class:Director	typeref:typename:bool
popScene	director.cpp	/^void Director::popScene()$/;"	f	class:Director	typeref:typename:void
position	factor.h	/^	Point position;$/;"	m	class:Factor	typeref:typename:Point
purple	color.h	/^	purple,$/;"	e	enum:Back
purple	color.h	/^	purple,$/;"	e	enum:Fore
pushScene	director.cpp	/^void Director::pushScene(Scene* s)$/;"	f	class:Director	typeref:typename:void
red	color.h	/^	red,$/;"	e	enum:Back
red	color.h	/^	red,$/;"	e	enum:Fore
removeCamera	scene.cpp	/^void Scene::removeCamera(Camera* cam)$/;"	f	class:Scene	typeref:typename:void
removeComponent	factor.cpp	/^void Factor::removeComponent(Component* com)$/;"	f	class:Factor	typeref:typename:void
removeFactor	scene.cpp	/^void Scene::removeFactor(Factor* f)$/;"	f	class:Scene	typeref:typename:void
removeObserver	observable.cpp	/^void Observable::removeObserver(Observer* o)$/;"	f	class:Observable	typeref:typename:void
render	camera.cpp	/^void Camera::render()$/;"	f	class:Camera	typeref:typename:void
render	scene.cpp	/^void Scene::render()$/;"	f	class:Scene	typeref:typename:void
replaceScene	director.cpp	/^void Director::replaceScene(Scene* s)$/;"	f	class:Director	typeref:typename:void
resume	director.cpp	/^void Director::resume()$/;"	f	class:Director	typeref:typename:void
right	type/rect.cpp	/^float Rect::right() const$/;"	f	class:Rect	typeref:typename:float
run	director.cpp	/^void Director::run()$/;"	f	class:Director	typeref:typename:void
sThumbLX	input/xinput.h	/^    SHORT sThumbLX;$/;"	m	struct:_XINPUT_GAMEPAD	typeref:typename:SHORT
sThumbLY	input/xinput.h	/^    SHORT sThumbLY;$/;"	m	struct:_XINPUT_GAMEPAD	typeref:typename:SHORT
sThumbRX	input/xinput.h	/^    SHORT sThumbRX;$/;"	m	struct:_XINPUT_GAMEPAD	typeref:typename:SHORT
sThumbRY	input/xinput.h	/^    SHORT sThumbRY;$/;"	m	struct:_XINPUT_GAMEPAD	typeref:typename:SHORT
scan	keyboard_input.cpp	/^void KeyboardInput::scan()$/;"	f	class:KeyboardInput	typeref:typename:void
scene	camera.h	/^	Scene* scene;$/;"	m	class:Camera	typeref:typename:Scene *
scenes	director.h	/^	std::vector<Scene*> scenes;$/;"	m	class:Director	typeref:typename:std::vector<Scene * >
secPerUpdate	director.h	/^	float               secPerUpdate;$/;"	m	class:Director	typeref:typename:float
setChar	tile.cpp	/^void Tile::setChar(char c)$/;"	f	class:Tile	typeref:typename:void
setColor	tile.cpp	/^void Tile::setColor(const Color& c)$/;"	f	class:Tile	typeref:typename:void
setDepth	camera.cpp	/^void Camera::setDepth(ushort d)$/;"	f	class:Camera	typeref:typename:void
setDirty	observable.cpp	/^void Observable::setDirty(bool flag)$/;"	f	class:Observable	typeref:typename:void
setInputPosition	camera.cpp	/^void Camera::setInputPosition(const Point& p)$/;"	f	class:Camera	typeref:typename:void
setInterval	input.cpp	/^void Input::setInterval(ushort ms)$/;"	f	class:Input	typeref:typename:void
setOutputPosition	camera.cpp	/^void Camera::setOutputPosition(const Point& p)$/;"	f	class:Camera	typeref:typename:void
setPosition	factor.cpp	/^void Factor::setPosition(const Point& pos)$/;"	f	class:Factor	typeref:typename:void
setScene	camera.cpp	/^void Camera::setScene(Scene* s)$/;"	f	class:Camera	typeref:typename:void
setSecPerUpdate	director.cpp	/^void Director::setSecPerUpdate(float sec)$/;"	f	class:Director	typeref:typename:void
setSize	camera.cpp	/^void Camera::setSize(Size s)$/;"	f	class:Camera	typeref:typename:void
setSize	texture.cpp	/^void Texture::setSize(Size s)$/;"	f	class:Texture	typeref:typename:void
setTexture	factor.cpp	/^void Factor::setTexture(const Texture& texture)$/;"	f	class:Factor	typeref:typename:void
setVibration	input/gamepad.cpp	/^void Gamepad::setVibration(unsigned short left, unsigned short right) const$/;"	f	class:Gamepad	typeref:typename:void
setVisible	cursor.cpp	/^void Cursor::setVisible(bool v)$/;"	f	class:Cursor	typeref:typename:void
shapes	physics/physics_body.h	/^	std::vector<PhysicsShape*> shapes;$/;"	m	class:PhysicsBody	typeref:typename:std::vector<PhysicsShape * >
show	terminal.cpp	/^void Terminal::Cursor::show()$/;"	f	class:Terminal::Cursor	typeref:typename:void
size	camera.h	/^	Size   size;$/;"	m	class:Camera	typeref:typename:Size
size	texture.h	/^	Size              size;$/;"	m	class:Texture	typeref:typename:Size
status	input/gamepad_event.h	/^	bool     status;$/;"	m	class:GamepadEvent	typeref:typename:bool
subType	input/gamepad_event.h	/^	SubType  subType;$/;"	m	class:GamepadEvent	typeref:typename:SubType
texture	factor.h	/^	Texture                 texture;$/;"	m	class:Factor	typeref:typename:Texture
tiles	texture.h	/^	std::vector<Tile> tiles;$/;"	m	class:Texture	typeref:typename:std::vector<Tile>
type	event.h	/^	Type type;$/;"	m	class:Event	typeref:typename:Type
update	factor.cpp	/^void Factor::update()$/;"	f	class:Factor	typeref:typename:void
update	input.cpp	/^void Input::update()$/;"	f	class:Input	typeref:typename:void
update	input/gamepad.cpp	/^void Gamepad::update()$/;"	f	class:Gamepad	typeref:typename:void
update	scene.cpp	/^void Scene::update()$/;"	f	class:Scene	typeref:typename:void
updateFactors	scene.cpp	/^void Scene::updateFactors()$/;"	f	class:Scene	typeref:typename:void
updatePhysics	scene.cpp	/^void Scene::updatePhysics()$/;"	f	class:Scene	typeref:typename:void
userIndex	input/gamepad.h	/^	short userIndex;$/;"	m	class:Gamepad	typeref:typename:short
ushort	camera.h	/^typedef unsigned short ushort;$/;"	t	typeref:typename:unsigned short
ushort	cursor.h	/^typedef unsigned short ushort;$/;"	t	typeref:typename:unsigned short
ushort	input.h	/^typedef unsigned short ushort;$/;"	t	typeref:typename:unsigned short
ushort	texture.h	/^typedef unsigned short ushort;$/;"	t	typeref:typename:unsigned short
ushort	type/rect.h	/^typedef unsigned short ushort;$/;"	t	typeref:typename:unsigned short
ushort	Math/Size.h	/^typedef unsigned short ushort;$/;"	t	typeref:typename:unsigned short
value	input/gamepad_event.h	/^	float    value;$/;"	m	class:GamepadEvent	typeref:typename:float
velocity	physics/physics_body.h	/^	Vec2 velocity;$/;"	m	class:PhysicsBody	typeref:typename:Vec2
wButtons	input/xinput.h	/^    WORD wButtons;$/;"	m	struct:_XINPUT_GAMEPAD	typeref:typename:WORD
wLeftMotorSpeed	input/xinput.h	/^    WORD wLeftMotorSpeed;$/;"	m	struct:_XINPUT_VIBRATION	typeref:typename:WORD
wRightMotorSpeed	input/xinput.h	/^    WORD wRightMotorSpeed;$/;"	m	struct:_XINPUT_VIBRATION	typeref:typename:WORD
white	color.h	/^	white$/;"	e	enum:Back
white	color.h	/^	white$/;"	e	enum:Fore
width	type/rect.h	/^	float width;$/;"	m	class:Rect	typeref:typename:float
x	type/point.h	/^	float x;$/;"	m	class:Point	typeref:typename:float
x	type/rect.h	/^	float x;$/;"	m	class:Rect	typeref:typename:float
x	Math/Size.h	/^	ushort x;$/;"	m	class:Size	typeref:typename:ushort
x	type/vec2.h	/^	float x;$/;"	m	class:Vec2	typeref:typename:float
y	type/point.h	/^	float y;$/;"	m	class:Point	typeref:typename:float
y	type/rect.h	/^	float y;$/;"	m	class:Rect	typeref:typename:float
y	Math/Size.h	/^	ushort y;$/;"	m	class:Size	typeref:typename:ushort
y	type/vec2.h	/^	float y;$/;"	m	class:Vec2	typeref:typename:float
yellow	color.h	/^	yellow,$/;"	e	enum:Back
yellow	color.h	/^	yellow,$/;"	e	enum:Fore
~Gamepad	input/gamepad.cpp	/^Gamepad::~Gamepad()$/;"	f	class:Gamepad
~Scene	scene.cpp	/^Scene::~Scene()$/;"	f	class:Scene
